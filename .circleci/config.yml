version: 2.1
orbs:
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@4.1.2
  ansible-playbook: orbss/ansible-playbook@0.0.5
  ruby: circleci/ruby@2.1.1

jobs:
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cloudformation/*.yml

  deploy cloudformation:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:
          name: Deploy cloudformation
          command: |
            aws cloudformation deploy --template-file cloudformation/lecture13_Network.yml --stack-name lecture13-Network
            aws cloudformation deploy --template-file cloudformation/lecture13_Security.yml --stack-name lecture13-Security --parameter-overrides MyIP=$MY_IP --capabilities CAPABILITY_IAM
            aws cloudformation deploy --template-file cloudformation/lecture13_Application.yml --stack-name lecture13-Application
      - run:
          name: Set Environment Variable of EC2 public IP
          command: |
            AWS_EC2_PUBLIC_IP=$(aws cloudformation describe-stacks \
              --stack-name lecture13-Application \
              --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIp'].OutputValue" \
              --output text)
            echo "AWS_EC2_PUBLIC_IP: $AWS_EC2_PUBLIC_IP" 
            echo 'export AWS_EC2_PUBLIC_IP="$AWS_EC2_PUBLIC_IP"' >> "$BASH_ENV"
      - run:
          name: Set Environment Variable of RDS endpoint
          command: |
            AWS_RDS_ENDPOINT=$(aws cloudformation describe-stacks \
              --stack-name lecture13-Application \
              --query "Stacks[0].Outputs[?OutputKey=='RDSInstanceEndpoint'].OutputValue" \
              --output text)
            echo "AWS_RDS_ENDPOINT: $AWS_RDS_ENDPOINT" 
            echo 'export AWS_RDS_ENDPOINT="$AWS_RDS_ENDPOINT"' >> "$BASH_ENV"
      - run:
          name: Set Environment Variable of ALB DNS name
          command: |
            AWS_ALB_DNS_NAME=$(aws cloudformation describe-stacks \
              --stack-name lecture13-Application \
              --query "Stacks[0].Outputs[?OutputKey=='ALBDNSName'].OutputValue" \
              --output text)
            echo "AWS_ALB_DNS_NAME: $AWS_ALB_DNS_NAME" 
            echo 'export AWS_ALB_DNS_NAME="$AWS_ALB_DNS_NAME"' >> "$BASH_ENV"
      - run:
          name: check pwd
          command: pwd
      - run:
          name: check ls -la /home/circleci
          command: ls -la /home/circleci
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - .bashrc


  execute ansible:
    executor: ansible-playbook/default
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Set Environment Variable
          command: |
            source /workspace/bash_env.sh
      - ansible-playbook/install:
          version: 2.10.7
      - add_ssh_keys:
          fingerprints:
            - "SHA256:xkKPs9zw43wqifa6k8pVF45DEv/cYXQQIO8WJrS06Y4"   
      - run:
          name: check key
          command: |
            ls -la ~/.ssh
            cat ~/.ssh/config
      - run:
          name: Add StrictHostKeyChecking no to ~/.ssh/config
          command: |
            echo -e "Host *\n  StrictHostKeyChecking no" >> ~/.ssh/config
            cat ~/.ssh/config
      - ansible-playbook/playbook:
          playbook: ansible/playbook.yml
          playbook-options: -i ansible/inventory --extra-vars "AWS_EC2_PUBLIC_IP=${AWS_EC2_PUBLIC_IP} AWS_RDS_ENDPOINT=${AWS_RDS_ENDPOINT} AWS_ALB_DNS_NAME=${AWS_ALB_DNS_NAME}"

#  execute-serverspec:
#    executor: ruby/default
#    steps:
#      - checkout
#      - ruby/install:
#          version: '3.1.2'
#      - ruby/install-deps:
#          app-dir: serverspec
#      - run:
#          name: 'execute serverspec'

workflows:
  raisetech:
    jobs:
      - cfn-lint
      - deploy cloudformation:
          requires:
            - cfn-lint
      - execute ansible:
          requires:
            - deploy cloudformation
